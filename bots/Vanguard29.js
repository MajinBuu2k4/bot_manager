
const mineflayer = require('mineflayer');
const webInventory = require('mineflayer-web-inventory');
const fs = require('fs');
const path = require('path');

const USERNAME = 'Vanguard29';
const INVENTORY_PORT = 5029;
const SERVER_HOST = 'mc.luckyvn.com';
const MINECRAFT_VERSION = '1.18.2';
const LOG_DIR = 'C:/Users/Administrator/Desktop/bot_manager/logs';
const LOG_FILE = path.join(LOG_DIR, `${USERNAME}.log`);
const MAX_RECONNECT_ATTEMPTS = 10;

let bot;
let checkClockInterval;
let reconnectAttempts = 0;
let loggedIn = false;
let menuOpened = false;
let inGame = false;
let webInventoryServerStarted = false;

if (!fs.existsSync(LOG_DIR)) fs.mkdirSync(LOG_DIR, { recursive: true });

setInterval(() => {
  try {
    let state = 'ALIVE';
    if (inGame) state = 'ALIVE-INGAME';
    else if (menuOpened) state = 'ALIVE-MENU';
    else if (loggedIn) state = 'ALIVE-LOBBY';
    fs.writeFileSync(LOG_FILE, `${state} ${new Date().toISOString()}`);
  } catch (err) {
    console.error("‚ùó Kh√¥ng th·ªÉ ghi log:", err.message);
  }
}, 5000);

function createBot() {
  loggedIn = false;
  menuOpened = false;
  inGame = false;

  bot = mineflayer.createBot({
    host: SERVER_HOST,
    username: USERNAME,
    version: MINECRAFT_VERSION,
  });

  bot.once('spawn', () => {
    reconnectAttempts = 0;
    console.log("üü¢ Bot ƒë√£ v√†o game, ch·ªù login...");

    if (!webInventoryServerStarted) {
      webInventory(bot, { port: INVENTORY_PORT });
      webInventoryServerStarted = true;
      console.log(`üåê Xem inventory t·∫°i: http://localhost:${INVENTORY_PORT}`);
    }

    checkClockInterval = setInterval(() => {
      if (loggedIn && !menuOpened) {
        const slot4 = bot.inventory.slots[36 + 4];
        if (slot4?.name === 'minecraft:clock') {
          bot.setQuickBarSlot(4);
          bot.activateItem();
        }
      }
    }, 10000);
  });

  bot.on('message', (message) => {
    const msg = message.toString();
    if (message.toAnsi) console.log(message.toAnsi());
    else console.log(msg);

    if (msg.includes('/login') && !loggedIn) {
      bot.chat('/login Phuc2005');
      loggedIn = true;
      console.log("üîê ƒê√£ g·ª≠i l·ªánh /login");
    }

    if (msg.includes('ƒêƒÉng nh·∫≠p th√†nh c√¥ng') && !menuOpened) {
      setTimeout(() => {
        console.log("üïπ D√πng ƒë·ªìng h·ªì m·ªü menu ch·ªçn ch·∫ø ƒë·ªô");
        bot.setQuickBarSlot(4);
        bot.activateItem();
      }, 1000);
    }

    if (msg.includes('B·∫°n ƒë√£ m·ªü b·∫£ng ch·ªçn m√°y ch·ªß!') && !menuOpened) {
      menuOpened = true;
      console.log("üì• Menu m·ªü, chu·∫©n b·ªã click slot 22 v√† 34");
      setTimeout(() => bot.clickWindow(22, 0, 0), 1000);
      setTimeout(() => {
        bot.clickWindow(34, 0, 0);
        console.log("üéÆ ƒê√£ ch·ªçn m√°y ch·ªß, ch·ªù v√†o In-Game...");
      }, 2500);
    }

    if (msg.includes(`${USERNAME} ƒê√£ tham gia m√°y ch·ªß!`)) {
      inGame = true;
      console.log("‚úÖ Bot ƒë√£ v√†o In-Game!");
    }

    const autoChaoRegex = /Ch√†o m·ª´ng \[ (.*?) ] l·∫ßn ƒë·∫ßu ti√™n ƒë·∫øn/;
    const chaoMatch = msg.match(autoChaoRegex);
    if (chaoMatch && chaoMatch[1]) {
      const playerName = chaoMatch[1];
      bot.chat(`Xin ch√†o b·∫°n ${playerName}`);
      console.log(`üëã ƒê√£ ch√†o ng∆∞·ªùi ch∆°i m·ªõi: ${playerName}`);
    }
  });

  bot.on('respawn', () => {
    menuOpened = false;
    inGame = false;
    console.log('‚ôªÔ∏è Reset tr·∫°ng th√°i menu v√† inGame khi v√†o s·∫£nh');

    setTimeout(() => {
      const clockSlot = bot.inventory.slots[36 + 4];
      if (clockSlot?.name.includes('clock')) {
        bot.setQuickBarSlot(4);
        console.log('üîÅ C·∫ßm l·∫°i ƒë·ªìng h·ªì sau khi v√†o s·∫£nh');
      }
    }, 2000);
  });

  bot.on('end', () => {
    clearInterval(checkClockInterval);
    reconnectAttempts++;
    console.log(`‚ùå M·∫•t k·∫øt n·ªëi (l·∫ßn th·ª≠ ${reconnectAttempts}/10)`);

    if (reconnectAttempts >= 10) {
      console.log("üõë Qu√° s·ªë l·∫ßn reconnect, d·ª´ng bot");
      return process.exit(1);
    }

    const delay = Math.min(reconnectAttempts, 10) * 5000;
    console.log(`‚åõ Th·ª≠ k·∫øt n·ªëi l·∫°i sau ${delay / 1000}s...`);
    setTimeout(safeCreateBot, delay);
  });

  bot.on('kicked', (reason) => {
    clearInterval(checkClockInterval);
    console.log("‚ùå B·ªã kick:", reason);

    if (reason.includes("ƒëang k·∫øt n·ªëi") || reason.includes("already connected")) {
      console.log("‚ö†Ô∏è L·ªói session, ƒë·ª£i 20s r·ªìi th·ª≠ l·∫°i...");
      setTimeout(() => {
        reconnectAttempts = 0;
        safeCreateBot();
      }, 20000);
    } else {
      reconnect();
    }
  });

  bot.on('error', err => console.log("‚ö†Ô∏è L·ªói:", err.message));
}

function reconnect() {
  console.log("‚ôªÔ∏è Reconnect sau 5s...");
  setTimeout(safeCreateBot, 5000);
}

function safeCreateBot() {
  try {
    createBot();
  } catch (err) {
    console.error("‚ùó L·ªói t·∫°o bot:", err.message);
    setTimeout(safeCreateBot, 5000);
  }
}

safeCreateBot();
